import React, { Fragment } from 'react';
import { isDateSeparatorMessage } from './utils';
import { Message } from '../Message';
import { DateSeparator as DefaultDateSeparator } from '../DateSeparator';
import { EventComponent as DefaultMessageSystem } from '../EventComponent';
import { UnreadMessagesSeparator as DefaultUnreadMessagesSeparator } from './UnreadMessagesSeparator';
import { CUSTOM_MESSAGE_TYPE } from '../../constants/messageTypes';
export function defaultRenderMessages({ channelUnreadUiState, components, customClasses, lastReceivedMessageId: lastReceivedId, messageGroupStyles, messages, readData, sharedMessageProps: messageProps, }) {
    const { DateSeparator = DefaultDateSeparator, HeaderComponent, MessageSystem = DefaultMessageSystem, UnreadMessagesSeparator = DefaultUnreadMessagesSeparator, } = components;
    const renderedMessages = [];
    let firstMessage;
    for (let index = 0; index < messages.length; index++) {
        const message = messages[index];
        if (isDateSeparatorMessage(message)) {
            renderedMessages.push(React.createElement("li", { key: `${message.date.toISOString()}-i` },
                React.createElement(DateSeparator, { date: message.date, formatDate: messageProps.formatDate, unread: message.unread })));
        }
        else if (message.customType === CUSTOM_MESSAGE_TYPE.intro && HeaderComponent) {
            renderedMessages.push(React.createElement("li", { key: 'intro' },
                React.createElement(HeaderComponent, null)));
        }
        else if (message.type === 'system') {
            renderedMessages.push(React.createElement("li", { "data-message-id": message.id, key: message.id || message.created_at },
                React.createElement(MessageSystem, { message: message })));
        }
        else {
            if (!firstMessage) {
                firstMessage = message;
            }
            const groupStyles = messageGroupStyles[message.id] || '';
            const messageClass = customClasses?.message || `str-chat__li str-chat__li--${groupStyles}`;
            const createdAtTimestamp = message.created_at && new Date(message.created_at).getTime();
            const lastReadTimestamp = channelUnreadUiState?.last_read.getTime();
            const isFirstMessage = firstMessage?.id && firstMessage.id === message.id;
            const isNewestMessage = index === messages.length - 1;
            const isLastReadMessage = channelUnreadUiState?.last_read_message_id === message.id ||
                (!channelUnreadUiState?.unread_messages && createdAtTimestamp === lastReadTimestamp);
            const isFirstUnreadMessage = channelUnreadUiState?.first_unread_message_id === message.id ||
                (!!channelUnreadUiState?.unread_messages &&
                    !!createdAtTimestamp &&
                    !!lastReadTimestamp &&
                    createdAtTimestamp > lastReadTimestamp &&
                    isFirstMessage);
            const showUnreadSeparatorAbove = !channelUnreadUiState?.last_read_message_id && isFirstUnreadMessage;
            const showUnreadSeparatorBelow = isLastReadMessage &&
                !isNewestMessage &&
                (channelUnreadUiState?.first_unread_message_id || !!channelUnreadUiState?.unread_messages); // this part has to be here as we do not mark channel read when sending a message
            renderedMessages.push(React.createElement(Fragment, { key: message.id || message.created_at },
                showUnreadSeparatorAbove && UnreadMessagesSeparator && (React.createElement("li", { className: 'str-chat__li str-chat__unread-messages-separator-wrapper' },
                    React.createElement(UnreadMessagesSeparator, { unreadCount: channelUnreadUiState?.unread_messages }))),
                React.createElement("li", { className: messageClass, "data-message-id": message.id, "data-testid": messageClass },
                    React.createElement(Message, { groupStyles: [groupStyles], lastReceivedId: lastReceivedId, message: message, readBy: readData[message.id] || [], ...messageProps })),
                showUnreadSeparatorBelow && UnreadMessagesSeparator && (React.createElement("li", { className: 'str-chat__li str-chat__unread-messages-separator-wrapper' },
                    React.createElement(UnreadMessagesSeparator, { unreadCount: channelUnreadUiState?.unread_messages })))));
        }
    }
    return renderedMessages;
}
