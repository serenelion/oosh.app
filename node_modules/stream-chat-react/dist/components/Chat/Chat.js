import React from 'react';
import { useChat } from './hooks/useChat';
import { useCreateChatContext } from './hooks/useCreateChatContext';
import { useChannelsQueryState } from './hooks/useChannelsQueryState';
import { ChatProvider } from '../../context/ChatContext';
import { TranslationProvider } from '../../context/TranslationContext';
/**
 * Wrapper component for a StreamChat application. Chat needs to be placed around any other chat components
 * as it provides the ChatContext.
 */
export const Chat = (props) => {
    const { children, client, customClasses, defaultLanguage, i18nInstance, initialNavOpen = true, theme = 'messaging light', useImageFlagEmojisOnWindows = false, } = props;
    const { channel, closeMobileNav, getAppSettings, latestMessageDatesByChannels, mutes, navOpen, openMobileNav, setActiveChannel, translators, } = useChat({ client, defaultLanguage, i18nInstance, initialNavOpen });
    const channelsQueryState = useChannelsQueryState();
    const chatContextValue = useCreateChatContext({
        channel,
        channelsQueryState,
        client,
        closeMobileNav,
        customClasses,
        getAppSettings,
        latestMessageDatesByChannels,
        mutes,
        navOpen,
        openMobileNav,
        setActiveChannel,
        theme,
        useImageFlagEmojisOnWindows,
    });
    if (!translators.t)
        return null;
    return (React.createElement(ChatProvider, { value: chatContextValue },
        React.createElement(TranslationProvider, { value: translators }, children)));
};
