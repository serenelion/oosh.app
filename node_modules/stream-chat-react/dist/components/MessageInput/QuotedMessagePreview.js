import React, { useMemo } from 'react';
import { Attachment as DefaultAttachment } from '../Attachment';
import { Avatar as DefaultAvatar } from '../Avatar';
import { CloseIcon } from './icons';
import { useChannelActionContext } from '../../context/ChannelActionContext';
import { useComponentContext } from '../../context/ComponentContext';
import { useTranslationContext } from '../../context/TranslationContext';
export const QuotedMessagePreviewHeader = () => {
    const { setQuotedMessage } = useChannelActionContext('QuotedMessagePreview');
    const { t } = useTranslationContext('QuotedMessagePreview');
    return (React.createElement("div", { className: 'str-chat__quoted-message-preview-header' },
        React.createElement("div", { className: 'str-chat__quoted-message-reply-to-message' }, t('Reply to Message')),
        React.createElement("button", { "aria-label": t('aria/Cancel Reply'), className: 'str-chat__quoted-message-remove', onClick: () => setQuotedMessage(undefined) },
            React.createElement(CloseIcon, null))));
};
export const QuotedMessagePreview = ({ quotedMessage, }) => {
    const { Attachment = DefaultAttachment, Avatar = DefaultAvatar, } = useComponentContext('QuotedMessagePreview');
    const { userLanguage } = useTranslationContext('QuotedMessagePreview');
    const quotedMessageText = quotedMessage.i18n?.[`${userLanguage}_text`] ||
        quotedMessage.text;
    const quotedMessageAttachment = useMemo(() => {
        const [attachment] = quotedMessage.attachments ?? [];
        return attachment ? [attachment] : [];
    }, [quotedMessage.attachments]);
    if (!quotedMessageText && !quotedMessageAttachment)
        return null;
    return (React.createElement("div", { className: 'str-chat__quoted-message-preview', "data-testid": 'quoted-message-preview' },
        quotedMessage.user && (React.createElement(Avatar, { className: 'str-chat__avatar--quoted-message-sender', image: quotedMessage.user.image, name: quotedMessage.user.name || quotedMessage.user.id, user: quotedMessage.user })),
        React.createElement("div", { className: 'str-chat__quoted-message-bubble' },
            !!quotedMessageAttachment.length && (React.createElement(Attachment, { attachments: quotedMessageAttachment, isQuoted: true })),
            React.createElement("div", { className: 'str-chat__quoted-message-text', "data-testid": 'quoted-message-text' },
                React.createElement("p", null, quotedMessageText)))));
};
