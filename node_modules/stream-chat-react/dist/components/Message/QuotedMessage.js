import React from 'react';
import clsx from 'clsx';
import { Avatar as DefaultAvatar } from '../Avatar';
import { useComponentContext } from '../../context/ComponentContext';
import { useMessageContext } from '../../context/MessageContext';
import { useTranslationContext } from '../../context/TranslationContext';
import { useChannelActionContext } from '../../context/ChannelActionContext';
import { Attachment as DefaultAttachment } from '../Attachment';
export const QuotedMessage = () => {
    const { Attachment = DefaultAttachment, Avatar: ContextAvatar, } = useComponentContext('QuotedMessage');
    const { isMyMessage, message } = useMessageContext('QuotedMessage');
    const { t, userLanguage } = useTranslationContext('QuotedMessage');
    const { jumpToMessage } = useChannelActionContext('QuotedMessage');
    const Avatar = ContextAvatar || DefaultAvatar;
    const { quoted_message } = message;
    if (!quoted_message)
        return null;
    const quotedMessageDeleted = quoted_message.deleted_at || quoted_message.type === 'deleted';
    const quotedMessageText = quotedMessageDeleted
        ? t('This message was deleted...')
        : quoted_message.i18n?.[`${userLanguage}_text`] ||
            quoted_message.text;
    const quotedMessageAttachment = quoted_message.attachments?.length && !quotedMessageDeleted
        ? quoted_message.attachments[0]
        : null;
    if (!quotedMessageText && !quotedMessageAttachment)
        return null;
    return (React.createElement(React.Fragment, null,
        React.createElement("div", { className: clsx('str-chat__quoted-message-preview', { mine: isMyMessage() }), "data-testid": 'quoted-message', onClickCapture: (e) => {
                e.stopPropagation();
                e.preventDefault();
                jumpToMessage(quoted_message.id);
            } },
            quoted_message.user && (React.createElement(Avatar, { className: 'str-chat__avatar--quoted-message-sender', image: quoted_message.user.image, name: quoted_message.user.name || quoted_message.user.id, user: quoted_message.user })),
            React.createElement("div", { className: 'str-chat__quoted-message-bubble', "data-testid": 'quoted-message-contents' },
                quotedMessageAttachment && (React.createElement(Attachment, { attachments: [quotedMessageAttachment], isQuoted: true })),
                React.createElement("div", { className: 'str-chat__quoted-message-bubble__text', "data-testid": 'quoted-message-text' }, quotedMessageText))),
        message.attachments?.length ? React.createElement(Attachment, { attachments: message.attachments }) : null));
};
