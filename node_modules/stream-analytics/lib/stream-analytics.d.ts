import * as errors from './errors';
import { Impression, Engagement, User } from './specs';
declare class StreamAnalytics<UserType extends User = User> {
    static errors: typeof errors;
    baseUrl: string;
    apiKey: string;
    token: string;
    node: boolean;
    userData: null | string | UserType;
    constructor(config: {
        apiKey: string;
        token: string;
        baseUrl?: string;
    });
    setUser(data: string | UserType): void;
    userAgent(): string;
    _throwMissingUserData(event: Impression | Engagement): void;
    _validateAndNormalizeUserData(resource: string, eventList: Array<Impression | Engagement>): ({
        user_data: string | User | null;
        content_list: (string | (Record<string, unknown> & {
            foreign_id: string;
        }))[];
        features?: import("./specs").Feature[] | undefined;
        feed_id?: string | undefined;
        location?: string | undefined;
        position?: number | undefined;
        tracked_at?: string | undefined;
    } | {
        user_data: string | User | null;
        content: string | (Record<string, unknown> & {
            foreign_id: string;
        });
        label: string;
        boost?: number | undefined;
        features?: import("./specs").Feature[] | undefined;
        feed_id?: string | undefined;
        location?: string | undefined;
        position?: number | undefined;
        score?: number | undefined;
        tracked_at?: string | undefined;
    })[];
    _sendEvent(resource: string, eventList: Impression[] | Engagement[]): Promise<any>;
    trackImpression(eventData: Impression<UserType>): Promise<any>;
    trackImpressions(eventDataList: Impression<UserType>[]): Promise<any>;
    trackEngagement(eventData: Engagement<UserType>): Promise<any>;
    trackEngagements(eventDataList: Engagement<UserType>[]): Promise<any>;
}
export = StreamAnalytics;
//# sourceMappingURL=stream-analytics.d.ts.map